"use strict";

module.exports = "\n      type Query {\n        getSession: String\n        getSessionUser(session: String!): User\n        login(input: LoginInput!): User\n        destroySession(session: String!): String\n        getDashboard(_id: ID): Dashboard\n        getOptions(input: OptionQueryInput): [Option]\n        getUnderlying(input: UnderlyingQueryInput): [Underlying]\n        getBanking(input: BankingQueryInput): [Banking]\n        user(_id: ID): User\n        users: [User]\n        option(_id: String): Option\n        spread(_id: String): Spread\n        spreads: [Spread]\n        leg(_id: String): Leg\n        legs: [Leg]\n      }\n      type User {\n        _id: ID\n        firstName: String\n        lastName: String\n        email: String\n        authType: AuthType\n        password: String\n      }\n      type Dashboard {\n        user: ID!\n        balance: Float!\n        aroi: Float!\n        bookedIncome: Float!\n        chart: Chart!\n        options: OptionDashboard!\n        underlying: UnderlyingDashboard!\n      }\n      type Chart {\n        cash: Float!\n        options: Float!\n        underlying: Float!\n      }\n      type OptionDashboard {\n        numberOpen: Int!\n        potentialProfit: Float!\n        nextExpiry: Date!\n      }\n      type UnderlyingDashboard {\n        numberOpen: Int!\n        symbols: [SymbolDashboard] \n      }\n      type SymbolDashboard  {\n        symbol: String!\n        qty: Int!\n        targetPrice: Float!\n      }\n      type Underlying {\n        _id: ID\n        userId: ID\n        symbol: String\n        currentShares: Float\n        rawCostBasis: Float\n        adjustedCostBasis: Float\n        minimumCostBasis: Float\n        targetPriceWeek: Float\n        targetPriceMonth: Float\n        startDate: Date\n        endDate: Date\n        underlyingTrades: [UnderlyingTrade]\n      }\n      type UnderlyingTrade {\n        _id: ID\n        type: UnderlyingTradeType\n        tradeDate: Date\n        shares: Float\n        price: Float\n      }\n      type Banking {\n        _id: ID\n        userId: ID\n        amount: Float\n        type: String\n        date: Date\n      }\n      input UnderlyingQueryInput {\n        userId: ID\n        open: Boolean\n      }\n      input BankingQueryInput {\n        userId: ID\n        open: Boolean\n      }\n      input UnderlyingInput {\n        _id: ID \n        userId: ID\n        symbol: String\n        startDate: Date\n        endDate: Date\n        underlyingTrades: [UnderlyingTradeInput]\n      }\n      input EditUnderlyingInput {\n        _id: ID! \n        userId: ID!\n        startDate: Date\n        underlyingTrades: UnderlyingTradeInput\n      }\n      input UnderlyingTradeInput {\n        _id: ID\n        type: UnderlyingTradeType\n        tradeDate: Date\n        shares: Float\n        price: Float\n      }\n      input LoginInput {\n        username: String!\n        password: String!\n      }\n      input GoogleAuth {\n        token: String!\n      }\n      input UserInput {\n        _id: ID\n        firstName: String!\n        lastName: String!\n        email: String!\n        authType: AuthType!\n        password: String\n      }\n      input BankingInput {\n        userId: ID\n        amount: Float\n        type: String\n        date: Date\n      }\n      type Mutation {\n        upsertUser(input: UserInput!): User\n        processGoogleAuth(input: GoogleAuth!): User \n        createOption(input: OptionInput!): Option\n        createBanking(input: BankingInput!): Banking\n        createUnderlying(input: UnderlyingInput!): Underlying\n        createUnderlyingTrade(input: UnderlyingTradeInput!): Underlying\n        editUnderlying( input: EditUnderlyingInput! ): Underlying\n      }\n      scalar Date\n      enum AuthType {\n        Local\n        Google\n      }\n      enum OptionType {\n        P\n        C\n        BUPS\n        BUCS\n        BEPS\n        BECS\n      }\n      enum DirectionType {\n        Buy\n        Sell\n      }\n      enum UnderlyingTradeType {\n        Buy\n        Sell\n        Assigned\n        Called\n        Dividend\n      }\n      schema {\n        query: Query\n        mutation: Mutation\n      }\n";