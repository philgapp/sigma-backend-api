// Returns ROI as percentage to 2 decimals given input.profit and input.capital
const calculateRoi = (input) => {
    if(!input) return
    const rawRoi = input.profit / input.capital
    const roi = (rawRoi * 100).toFixed(2)
    return roi
}

// Returns AROI as percentage to 2 decimals given input.roi, input.startDate and input.endDate
const calculateAroi = (input) => {
    if(!input) return
    // Get full text string dates from numeric values
    const startDate = new Date(input.startDate)
    const endDate = new Date(input.endDate)
    // Calculate difference between dates in days
    const days = endDate.getDate() - startDate.getDate()
    // Calculate and return AROI as a float
    const rawDailyRoi = input.roi / days
    const rawAroi = rawDailyRoi * 365
    const aroi = rawAroi.toFixed(2)
    return aroi
}

// Returns price target to 2 decimals given
const calculatePriceTarget = (input) => {

}

// Random ID (TESTING ONLY)
// Generate unique IDs for use as pseudo-private/protected names.
// Similar in concept to
// <http://wiki.ecmascript.org/doku.php?id=strawman:names>.
//
// The goals of this function are twofold:
//
// * Provide a way to generate a string guaranteed to be unique when compared
//   to other strings generated by this function.
// * Make the string complex enough that it is highly unlikely to be
//   accidentally duplicated by hand (this is key if you're using `ID`
//   as a private/protected name on an object).
//
// Use:
//
//     var privateName = ID();
//     var o = { 'public': 'foo' };
//     o[privateName] = 'bar';
const generateTestId = function () {
    // Math.random should be unique because of its seeding algorithm.
    // Convert it to base 36 (numbers + letters), and grab the first 9 characters
    // after the decimal.
    return 'T' + Math.random().toString(36).substr(2, 9);
};

module.exports = {
    calculateRoi,
    calculateAroi,
    generateTestId
}